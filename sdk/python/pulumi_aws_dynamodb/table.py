# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *
from ._inputs import *
import pulumi_aws

__all__ = ['TableArgs', 'Table']

@pulumi.input_type
class TableArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['TableType'],
                 advanced: Optional[pulumi.Input['IntermediateTableArgsArgs']] = None,
                 basic: Optional[pulumi.Input['BasicTableArgsArgs']] = None,
                 expert: Optional[pulumi.Input['ExpertTableArgsArgs']] = None):
        """
        The set of arguments for constructing a Table resource.
        """
        pulumi.set(__self__, "type", type)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if basic is not None:
            pulumi.set(__self__, "basic", basic)
        if expert is not None:
            pulumi.set(__self__, "expert", expert)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TableType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TableType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input['IntermediateTableArgsArgs']]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input['IntermediateTableArgsArgs']]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter
    def basic(self) -> Optional[pulumi.Input['BasicTableArgsArgs']]:
        return pulumi.get(self, "basic")

    @basic.setter
    def basic(self, value: Optional[pulumi.Input['BasicTableArgsArgs']]):
        pulumi.set(self, "basic", value)

    @property
    @pulumi.getter
    def expert(self) -> Optional[pulumi.Input['ExpertTableArgsArgs']]:
        return pulumi.get(self, "expert")

    @expert.setter
    def expert(self, value: Optional[pulumi.Input['ExpertTableArgsArgs']]):
        pulumi.set(self, "expert", value)


class Table(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced: Optional[pulumi.Input[pulumi.InputType['IntermediateTableArgsArgs']]] = None,
                 basic: Optional[pulumi.Input[pulumi.InputType['BasicTableArgsArgs']]] = None,
                 expert: Optional[pulumi.Input[pulumi.InputType['ExpertTableArgsArgs']]] = None,
                 type: Optional[pulumi.Input['TableType']] = None,
                 __props__=None):
        """
        Create a Table resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Table resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced: Optional[pulumi.Input[pulumi.InputType['IntermediateTableArgsArgs']]] = None,
                 basic: Optional[pulumi.Input[pulumi.InputType['BasicTableArgsArgs']]] = None,
                 expert: Optional[pulumi.Input[pulumi.InputType['ExpertTableArgsArgs']]] = None,
                 type: Optional[pulumi.Input['TableType']] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TableArgs.__new__(TableArgs)

            __props__.__dict__["advanced"] = advanced
            __props__.__dict__["basic"] = basic
            __props__.__dict__["expert"] = expert
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["outputs"] = None
        super(Table, __self__).__init__(
            'aws-dynamodb:index:Table',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def outputs(self) -> pulumi.Output['pulumi_aws.dynamodb.Table']:
        return pulumi.get(self, "outputs")

