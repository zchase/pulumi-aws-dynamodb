// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsDynamoDB
{
    /// <summary>
    /// The type of key for your DynamoDB Table.
    /// </summary>
    [EnumType]
    public readonly struct TableKeyType : IEquatable<TableKeyType>
    {
        private readonly string _value;

        private TableKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TableKeyType @String { get; } = new TableKeyType("string");
        public static TableKeyType Number { get; } = new TableKeyType("number");

        public static bool operator ==(TableKeyType left, TableKeyType right) => left.Equals(right);
        public static bool operator !=(TableKeyType left, TableKeyType right) => !left.Equals(right);

        public static explicit operator string(TableKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TableKeyType other && Equals(other);
        public bool Equals(TableKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of DynamoDB Table.
    /// </summary>
    [EnumType]
    public readonly struct TableType : IEquatable<TableType>
    {
        private readonly string _value;

        private TableType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TableType @Default { get; } = new TableType("default");
        public static TableType Basic { get; } = new TableType("basic");
        public static TableType Advanced { get; } = new TableType("advanced");
        public static TableType Expert { get; } = new TableType("expert");

        public static bool operator ==(TableType left, TableType right) => left.Equals(right);
        public static bool operator !=(TableType left, TableType right) => !left.Equals(right);

        public static explicit operator string(TableType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TableType other && Equals(other);
        public bool Equals(TableType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
