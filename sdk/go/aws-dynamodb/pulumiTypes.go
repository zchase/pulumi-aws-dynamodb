// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsdynamodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/dynamodb"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Arguments for a basic AWS DynamoDB Table.
type BasicTableArgs struct {
	HashKey     map[string]string     `pulumi:"hashKey"`
	Name        *string               `pulumi:"name"`
	Provisioned *ProvisionedTableArgs `pulumi:"provisioned"`
	RangeKey    map[string]string     `pulumi:"rangeKey"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	Tags map[string]string `pulumi:"tags"`
}

// BasicTableArgsInput is an input type that accepts BasicTableArgsArgs and BasicTableArgsOutput values.
// You can construct a concrete instance of `BasicTableArgsInput` via:
//
//          BasicTableArgsArgs{...}
type BasicTableArgsInput interface {
	pulumi.Input

	ToBasicTableArgsOutput() BasicTableArgsOutput
	ToBasicTableArgsOutputWithContext(context.Context) BasicTableArgsOutput
}

// Arguments for a basic AWS DynamoDB Table.
type BasicTableArgsArgs struct {
	HashKey     pulumi.StringMapInput        `pulumi:"hashKey"`
	Name        pulumi.StringPtrInput        `pulumi:"name"`
	Provisioned ProvisionedTableArgsPtrInput `pulumi:"provisioned"`
	RangeKey    pulumi.StringMapInput        `pulumi:"rangeKey"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (BasicTableArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicTableArgs)(nil)).Elem()
}

func (i BasicTableArgsArgs) ToBasicTableArgsOutput() BasicTableArgsOutput {
	return i.ToBasicTableArgsOutputWithContext(context.Background())
}

func (i BasicTableArgsArgs) ToBasicTableArgsOutputWithContext(ctx context.Context) BasicTableArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicTableArgsOutput)
}

func (i BasicTableArgsArgs) ToBasicTableArgsPtrOutput() BasicTableArgsPtrOutput {
	return i.ToBasicTableArgsPtrOutputWithContext(context.Background())
}

func (i BasicTableArgsArgs) ToBasicTableArgsPtrOutputWithContext(ctx context.Context) BasicTableArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicTableArgsOutput).ToBasicTableArgsPtrOutputWithContext(ctx)
}

// BasicTableArgsPtrInput is an input type that accepts BasicTableArgsArgs, BasicTableArgsPtr and BasicTableArgsPtrOutput values.
// You can construct a concrete instance of `BasicTableArgsPtrInput` via:
//
//          BasicTableArgsArgs{...}
//
//  or:
//
//          nil
type BasicTableArgsPtrInput interface {
	pulumi.Input

	ToBasicTableArgsPtrOutput() BasicTableArgsPtrOutput
	ToBasicTableArgsPtrOutputWithContext(context.Context) BasicTableArgsPtrOutput
}

type basicTableArgsPtrType BasicTableArgsArgs

func BasicTableArgsPtr(v *BasicTableArgsArgs) BasicTableArgsPtrInput {
	return (*basicTableArgsPtrType)(v)
}

func (*basicTableArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicTableArgs)(nil)).Elem()
}

func (i *basicTableArgsPtrType) ToBasicTableArgsPtrOutput() BasicTableArgsPtrOutput {
	return i.ToBasicTableArgsPtrOutputWithContext(context.Background())
}

func (i *basicTableArgsPtrType) ToBasicTableArgsPtrOutputWithContext(ctx context.Context) BasicTableArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicTableArgsPtrOutput)
}

// Arguments for a basic AWS DynamoDB Table.
type BasicTableArgsOutput struct{ *pulumi.OutputState }

func (BasicTableArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicTableArgs)(nil)).Elem()
}

func (o BasicTableArgsOutput) ToBasicTableArgsOutput() BasicTableArgsOutput {
	return o
}

func (o BasicTableArgsOutput) ToBasicTableArgsOutputWithContext(ctx context.Context) BasicTableArgsOutput {
	return o
}

func (o BasicTableArgsOutput) ToBasicTableArgsPtrOutput() BasicTableArgsPtrOutput {
	return o.ToBasicTableArgsPtrOutputWithContext(context.Background())
}

func (o BasicTableArgsOutput) ToBasicTableArgsPtrOutputWithContext(ctx context.Context) BasicTableArgsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BasicTableArgs) *BasicTableArgs {
		return &v
	}).(BasicTableArgsPtrOutput)
}

func (o BasicTableArgsOutput) HashKey() pulumi.StringMapOutput {
	return o.ApplyT(func(v BasicTableArgs) map[string]string { return v.HashKey }).(pulumi.StringMapOutput)
}

func (o BasicTableArgsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicTableArgs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o BasicTableArgsOutput) Provisioned() ProvisionedTableArgsPtrOutput {
	return o.ApplyT(func(v BasicTableArgs) *ProvisionedTableArgs { return v.Provisioned }).(ProvisionedTableArgsPtrOutput)
}

func (o BasicTableArgsOutput) RangeKey() pulumi.StringMapOutput {
	return o.ApplyT(func(v BasicTableArgs) map[string]string { return v.RangeKey }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider .
func (o BasicTableArgsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v BasicTableArgs) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type BasicTableArgsPtrOutput struct{ *pulumi.OutputState }

func (BasicTableArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicTableArgs)(nil)).Elem()
}

func (o BasicTableArgsPtrOutput) ToBasicTableArgsPtrOutput() BasicTableArgsPtrOutput {
	return o
}

func (o BasicTableArgsPtrOutput) ToBasicTableArgsPtrOutputWithContext(ctx context.Context) BasicTableArgsPtrOutput {
	return o
}

func (o BasicTableArgsPtrOutput) Elem() BasicTableArgsOutput {
	return o.ApplyT(func(v *BasicTableArgs) BasicTableArgs {
		if v != nil {
			return *v
		}
		var ret BasicTableArgs
		return ret
	}).(BasicTableArgsOutput)
}

func (o BasicTableArgsPtrOutput) HashKey() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BasicTableArgs) map[string]string {
		if v == nil {
			return nil
		}
		return v.HashKey
	}).(pulumi.StringMapOutput)
}

func (o BasicTableArgsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BasicTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o BasicTableArgsPtrOutput) Provisioned() ProvisionedTableArgsPtrOutput {
	return o.ApplyT(func(v *BasicTableArgs) *ProvisionedTableArgs {
		if v == nil {
			return nil
		}
		return v.Provisioned
	}).(ProvisionedTableArgsPtrOutput)
}

func (o BasicTableArgsPtrOutput) RangeKey() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BasicTableArgs) map[string]string {
		if v == nil {
			return nil
		}
		return v.RangeKey
	}).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider .
func (o BasicTableArgsPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BasicTableArgs) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Arguments for a basic AWS DynamoDB Table.
type ExpertTableArgs struct {
	// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes.
	Attributes []dynamodb.TableAttribute `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode *string `pulumi:"billingMode"`
	// Describe a GSI for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes []dynamodb.TableGlobalSecondaryIndex `pulumi:"globalSecondaryIndexes"`
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey *string `pulumi:"hashKey"`
	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes []dynamodb.TableLocalSecondaryIndex `pulumi:"localSecondaryIndexes"`
	// The name of the index
	Name *string `pulumi:"name"`
	// Enable point-in-time recovery options.
	PointInTimeRecovery *dynamodb.TablePointInTimeRecovery `pulumi:"pointInTimeRecovery"`
	// The name of the range key; must be defined
	RangeKey *string `pulumi:"rangeKey"`
	// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
	ReadCapacity *int `pulumi:"readCapacity"`
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. Detailed below.
	Replicas []dynamodb.TableReplica `pulumi:"replicas"`
	// The time of the point-in-time recovery point to restore.
	RestoreDateTime *string `pulumi:"restoreDateTime"`
	// The name of the table to restore. Must match the name of an existing table.
	RestoreSourceName *string `pulumi:"restoreSourceName"`
	// If set, restores table to the most recent point-in-time recovery point.
	RestoreToLatestTime *bool `pulumi:"restoreToLatestTime"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption *dynamodb.TableServerSideEncryption `pulumi:"serverSideEncryption"`
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled *bool `pulumi:"streamEnabled"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType *string `pulumi:"streamViewType"`
	// The storage class of the table. Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
	TableClass *string `pulumi:"tableClass"`
	// A map of tags to populate on the created table. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Defines ttl, has two properties, and can only be specified once:
	Ttl *dynamodb.TableTtl `pulumi:"ttl"`
	// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
	WriteCapacity *int `pulumi:"writeCapacity"`
}

// ExpertTableArgsInput is an input type that accepts ExpertTableArgsArgs and ExpertTableArgsOutput values.
// You can construct a concrete instance of `ExpertTableArgsInput` via:
//
//          ExpertTableArgsArgs{...}
type ExpertTableArgsInput interface {
	pulumi.Input

	ToExpertTableArgsOutput() ExpertTableArgsOutput
	ToExpertTableArgsOutputWithContext(context.Context) ExpertTableArgsOutput
}

// Arguments for a basic AWS DynamoDB Table.
type ExpertTableArgsArgs struct {
	// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes.
	Attributes dynamodb.TableAttributeArrayInput `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumi.StringPtrInput `pulumi:"billingMode"`
	// Describe a GSI for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes dynamodb.TableGlobalSecondaryIndexArrayInput `pulumi:"globalSecondaryIndexes"`
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey pulumi.StringPtrInput `pulumi:"hashKey"`
	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes dynamodb.TableLocalSecondaryIndexArrayInput `pulumi:"localSecondaryIndexes"`
	// The name of the index
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Enable point-in-time recovery options.
	PointInTimeRecovery dynamodb.TablePointInTimeRecoveryPtrInput `pulumi:"pointInTimeRecovery"`
	// The name of the range key; must be defined
	RangeKey pulumi.StringPtrInput `pulumi:"rangeKey"`
	// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
	ReadCapacity pulumi.IntPtrInput `pulumi:"readCapacity"`
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. Detailed below.
	Replicas dynamodb.TableReplicaArrayInput `pulumi:"replicas"`
	// The time of the point-in-time recovery point to restore.
	RestoreDateTime pulumi.StringPtrInput `pulumi:"restoreDateTime"`
	// The name of the table to restore. Must match the name of an existing table.
	RestoreSourceName pulumi.StringPtrInput `pulumi:"restoreSourceName"`
	// If set, restores table to the most recent point-in-time recovery point.
	RestoreToLatestTime pulumi.BoolPtrInput `pulumi:"restoreToLatestTime"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption dynamodb.TableServerSideEncryptionPtrInput `pulumi:"serverSideEncryption"`
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled pulumi.BoolPtrInput `pulumi:"streamEnabled"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumi.StringPtrInput `pulumi:"streamViewType"`
	// The storage class of the table. Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
	TableClass pulumi.StringPtrInput `pulumi:"tableClass"`
	// A map of tags to populate on the created table. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Defines ttl, has two properties, and can only be specified once:
	Ttl dynamodb.TableTtlPtrInput `pulumi:"ttl"`
	// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
	WriteCapacity pulumi.IntPtrInput `pulumi:"writeCapacity"`
}

func (ExpertTableArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpertTableArgs)(nil)).Elem()
}

func (i ExpertTableArgsArgs) ToExpertTableArgsOutput() ExpertTableArgsOutput {
	return i.ToExpertTableArgsOutputWithContext(context.Background())
}

func (i ExpertTableArgsArgs) ToExpertTableArgsOutputWithContext(ctx context.Context) ExpertTableArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpertTableArgsOutput)
}

func (i ExpertTableArgsArgs) ToExpertTableArgsPtrOutput() ExpertTableArgsPtrOutput {
	return i.ToExpertTableArgsPtrOutputWithContext(context.Background())
}

func (i ExpertTableArgsArgs) ToExpertTableArgsPtrOutputWithContext(ctx context.Context) ExpertTableArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpertTableArgsOutput).ToExpertTableArgsPtrOutputWithContext(ctx)
}

// ExpertTableArgsPtrInput is an input type that accepts ExpertTableArgsArgs, ExpertTableArgsPtr and ExpertTableArgsPtrOutput values.
// You can construct a concrete instance of `ExpertTableArgsPtrInput` via:
//
//          ExpertTableArgsArgs{...}
//
//  or:
//
//          nil
type ExpertTableArgsPtrInput interface {
	pulumi.Input

	ToExpertTableArgsPtrOutput() ExpertTableArgsPtrOutput
	ToExpertTableArgsPtrOutputWithContext(context.Context) ExpertTableArgsPtrOutput
}

type expertTableArgsPtrType ExpertTableArgsArgs

func ExpertTableArgsPtr(v *ExpertTableArgsArgs) ExpertTableArgsPtrInput {
	return (*expertTableArgsPtrType)(v)
}

func (*expertTableArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpertTableArgs)(nil)).Elem()
}

func (i *expertTableArgsPtrType) ToExpertTableArgsPtrOutput() ExpertTableArgsPtrOutput {
	return i.ToExpertTableArgsPtrOutputWithContext(context.Background())
}

func (i *expertTableArgsPtrType) ToExpertTableArgsPtrOutputWithContext(ctx context.Context) ExpertTableArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpertTableArgsPtrOutput)
}

// Arguments for a basic AWS DynamoDB Table.
type ExpertTableArgsOutput struct{ *pulumi.OutputState }

func (ExpertTableArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpertTableArgs)(nil)).Elem()
}

func (o ExpertTableArgsOutput) ToExpertTableArgsOutput() ExpertTableArgsOutput {
	return o
}

func (o ExpertTableArgsOutput) ToExpertTableArgsOutputWithContext(ctx context.Context) ExpertTableArgsOutput {
	return o
}

func (o ExpertTableArgsOutput) ToExpertTableArgsPtrOutput() ExpertTableArgsPtrOutput {
	return o.ToExpertTableArgsPtrOutputWithContext(context.Background())
}

func (o ExpertTableArgsOutput) ToExpertTableArgsPtrOutputWithContext(ctx context.Context) ExpertTableArgsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExpertTableArgs) *ExpertTableArgs {
		return &v
	}).(ExpertTableArgsPtrOutput)
}

// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes.
func (o ExpertTableArgsOutput) Attributes() dynamodb.TableAttributeArrayOutput {
	return o.ApplyT(func(v ExpertTableArgs) []dynamodb.TableAttribute { return v.Attributes }).(dynamodb.TableAttributeArrayOutput)
}

// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
func (o ExpertTableArgsOutput) BillingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *string { return v.BillingMode }).(pulumi.StringPtrOutput)
}

// Describe a GSI for the table;
// subject to the normal limits on the number of GSIs, projected
// attributes, etc.
func (o ExpertTableArgsOutput) GlobalSecondaryIndexes() dynamodb.TableGlobalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v ExpertTableArgs) []dynamodb.TableGlobalSecondaryIndex { return v.GlobalSecondaryIndexes }).(dynamodb.TableGlobalSecondaryIndexArrayOutput)
}

// The name of the hash key in the index; must be
// defined as an attribute in the resource.
func (o ExpertTableArgsOutput) HashKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *string { return v.HashKey }).(pulumi.StringPtrOutput)
}

// Describe an LSI on the table;
// these can only be allocated *at creation* so you cannot change this
// definition after you have created the resource.
func (o ExpertTableArgsOutput) LocalSecondaryIndexes() dynamodb.TableLocalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v ExpertTableArgs) []dynamodb.TableLocalSecondaryIndex { return v.LocalSecondaryIndexes }).(dynamodb.TableLocalSecondaryIndexArrayOutput)
}

// The name of the index
func (o ExpertTableArgsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Enable point-in-time recovery options.
func (o ExpertTableArgsOutput) PointInTimeRecovery() dynamodb.TablePointInTimeRecoveryPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *dynamodb.TablePointInTimeRecovery { return v.PointInTimeRecovery }).(dynamodb.TablePointInTimeRecoveryPtrOutput)
}

// The name of the range key; must be defined
func (o ExpertTableArgsOutput) RangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *string { return v.RangeKey }).(pulumi.StringPtrOutput)
}

// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
func (o ExpertTableArgsOutput) ReadCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *int { return v.ReadCapacity }).(pulumi.IntPtrOutput)
}

// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. Detailed below.
func (o ExpertTableArgsOutput) Replicas() dynamodb.TableReplicaArrayOutput {
	return o.ApplyT(func(v ExpertTableArgs) []dynamodb.TableReplica { return v.Replicas }).(dynamodb.TableReplicaArrayOutput)
}

// The time of the point-in-time recovery point to restore.
func (o ExpertTableArgsOutput) RestoreDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *string { return v.RestoreDateTime }).(pulumi.StringPtrOutput)
}

// The name of the table to restore. Must match the name of an existing table.
func (o ExpertTableArgsOutput) RestoreSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *string { return v.RestoreSourceName }).(pulumi.StringPtrOutput)
}

// If set, restores table to the most recent point-in-time recovery point.
func (o ExpertTableArgsOutput) RestoreToLatestTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *bool { return v.RestoreToLatestTime }).(pulumi.BoolPtrOutput)
}

// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
func (o ExpertTableArgsOutput) ServerSideEncryption() dynamodb.TableServerSideEncryptionPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *dynamodb.TableServerSideEncryption { return v.ServerSideEncryption }).(dynamodb.TableServerSideEncryptionPtrOutput)
}

// Indicates whether Streams are to be enabled (true) or disabled (false).
func (o ExpertTableArgsOutput) StreamEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *bool { return v.StreamEnabled }).(pulumi.BoolPtrOutput)
}

// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
func (o ExpertTableArgsOutput) StreamViewType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *string { return v.StreamViewType }).(pulumi.StringPtrOutput)
}

// The storage class of the table. Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
func (o ExpertTableArgsOutput) TableClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *string { return v.TableClass }).(pulumi.StringPtrOutput)
}

// A map of tags to populate on the created table. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ExpertTableArgsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExpertTableArgs) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Defines ttl, has two properties, and can only be specified once:
func (o ExpertTableArgsOutput) Ttl() dynamodb.TableTtlPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *dynamodb.TableTtl { return v.Ttl }).(dynamodb.TableTtlPtrOutput)
}

// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
func (o ExpertTableArgsOutput) WriteCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExpertTableArgs) *int { return v.WriteCapacity }).(pulumi.IntPtrOutput)
}

type ExpertTableArgsPtrOutput struct{ *pulumi.OutputState }

func (ExpertTableArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpertTableArgs)(nil)).Elem()
}

func (o ExpertTableArgsPtrOutput) ToExpertTableArgsPtrOutput() ExpertTableArgsPtrOutput {
	return o
}

func (o ExpertTableArgsPtrOutput) ToExpertTableArgsPtrOutputWithContext(ctx context.Context) ExpertTableArgsPtrOutput {
	return o
}

func (o ExpertTableArgsPtrOutput) Elem() ExpertTableArgsOutput {
	return o.ApplyT(func(v *ExpertTableArgs) ExpertTableArgs {
		if v != nil {
			return *v
		}
		var ret ExpertTableArgs
		return ret
	}).(ExpertTableArgsOutput)
}

// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes.
func (o ExpertTableArgsPtrOutput) Attributes() dynamodb.TableAttributeArrayOutput {
	return o.ApplyT(func(v *ExpertTableArgs) []dynamodb.TableAttribute {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(dynamodb.TableAttributeArrayOutput)
}

// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
func (o ExpertTableArgsPtrOutput) BillingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.BillingMode
	}).(pulumi.StringPtrOutput)
}

// Describe a GSI for the table;
// subject to the normal limits on the number of GSIs, projected
// attributes, etc.
func (o ExpertTableArgsPtrOutput) GlobalSecondaryIndexes() dynamodb.TableGlobalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v *ExpertTableArgs) []dynamodb.TableGlobalSecondaryIndex {
		if v == nil {
			return nil
		}
		return v.GlobalSecondaryIndexes
	}).(dynamodb.TableGlobalSecondaryIndexArrayOutput)
}

// The name of the hash key in the index; must be
// defined as an attribute in the resource.
func (o ExpertTableArgsPtrOutput) HashKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.HashKey
	}).(pulumi.StringPtrOutput)
}

// Describe an LSI on the table;
// these can only be allocated *at creation* so you cannot change this
// definition after you have created the resource.
func (o ExpertTableArgsPtrOutput) LocalSecondaryIndexes() dynamodb.TableLocalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v *ExpertTableArgs) []dynamodb.TableLocalSecondaryIndex {
		if v == nil {
			return nil
		}
		return v.LocalSecondaryIndexes
	}).(dynamodb.TableLocalSecondaryIndexArrayOutput)
}

// The name of the index
func (o ExpertTableArgsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Enable point-in-time recovery options.
func (o ExpertTableArgsPtrOutput) PointInTimeRecovery() dynamodb.TablePointInTimeRecoveryPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *dynamodb.TablePointInTimeRecovery {
		if v == nil {
			return nil
		}
		return v.PointInTimeRecovery
	}).(dynamodb.TablePointInTimeRecoveryPtrOutput)
}

// The name of the range key; must be defined
func (o ExpertTableArgsPtrOutput) RangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.RangeKey
	}).(pulumi.StringPtrOutput)
}

// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
func (o ExpertTableArgsPtrOutput) ReadCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *int {
		if v == nil {
			return nil
		}
		return v.ReadCapacity
	}).(pulumi.IntPtrOutput)
}

// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. Detailed below.
func (o ExpertTableArgsPtrOutput) Replicas() dynamodb.TableReplicaArrayOutput {
	return o.ApplyT(func(v *ExpertTableArgs) []dynamodb.TableReplica {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(dynamodb.TableReplicaArrayOutput)
}

// The time of the point-in-time recovery point to restore.
func (o ExpertTableArgsPtrOutput) RestoreDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.RestoreDateTime
	}).(pulumi.StringPtrOutput)
}

// The name of the table to restore. Must match the name of an existing table.
func (o ExpertTableArgsPtrOutput) RestoreSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.RestoreSourceName
	}).(pulumi.StringPtrOutput)
}

// If set, restores table to the most recent point-in-time recovery point.
func (o ExpertTableArgsPtrOutput) RestoreToLatestTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *bool {
		if v == nil {
			return nil
		}
		return v.RestoreToLatestTime
	}).(pulumi.BoolPtrOutput)
}

// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
func (o ExpertTableArgsPtrOutput) ServerSideEncryption() dynamodb.TableServerSideEncryptionPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *dynamodb.TableServerSideEncryption {
		if v == nil {
			return nil
		}
		return v.ServerSideEncryption
	}).(dynamodb.TableServerSideEncryptionPtrOutput)
}

// Indicates whether Streams are to be enabled (true) or disabled (false).
func (o ExpertTableArgsPtrOutput) StreamEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *bool {
		if v == nil {
			return nil
		}
		return v.StreamEnabled
	}).(pulumi.BoolPtrOutput)
}

// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
func (o ExpertTableArgsPtrOutput) StreamViewType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.StreamViewType
	}).(pulumi.StringPtrOutput)
}

// The storage class of the table. Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
func (o ExpertTableArgsPtrOutput) TableClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.TableClass
	}).(pulumi.StringPtrOutput)
}

// A map of tags to populate on the created table. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ExpertTableArgsPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExpertTableArgs) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Defines ttl, has two properties, and can only be specified once:
func (o ExpertTableArgsPtrOutput) Ttl() dynamodb.TableTtlPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *dynamodb.TableTtl {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(dynamodb.TableTtlPtrOutput)
}

// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
func (o ExpertTableArgsPtrOutput) WriteCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExpertTableArgs) *int {
		if v == nil {
			return nil
		}
		return v.WriteCapacity
	}).(pulumi.IntPtrOutput)
}

// Arguments for a basic AWS DynamoDB Table.
type IntermediateTableArgs struct {
	// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes.
	Attributes []dynamodb.TableAttribute `pulumi:"attributes"`
	// Describe a GSI for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes []dynamodb.TableGlobalSecondaryIndex `pulumi:"globalSecondaryIndexes"`
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey *string `pulumi:"hashKey"`
	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes []dynamodb.TableLocalSecondaryIndex `pulumi:"localSecondaryIndexes"`
	Name                  *string                             `pulumi:"name"`
	Provisioned           *ProvisionedTableArgs               `pulumi:"provisioned"`
	// The name of the range key; must be defined.
	RangeKey *string `pulumi:"rangeKey"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	Tags map[string]string `pulumi:"tags"`
}

// IntermediateTableArgsInput is an input type that accepts IntermediateTableArgsArgs and IntermediateTableArgsOutput values.
// You can construct a concrete instance of `IntermediateTableArgsInput` via:
//
//          IntermediateTableArgsArgs{...}
type IntermediateTableArgsInput interface {
	pulumi.Input

	ToIntermediateTableArgsOutput() IntermediateTableArgsOutput
	ToIntermediateTableArgsOutputWithContext(context.Context) IntermediateTableArgsOutput
}

// Arguments for a basic AWS DynamoDB Table.
type IntermediateTableArgsArgs struct {
	// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes.
	Attributes dynamodb.TableAttributeArrayInput `pulumi:"attributes"`
	// Describe a GSI for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes dynamodb.TableGlobalSecondaryIndexArrayInput `pulumi:"globalSecondaryIndexes"`
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey pulumi.StringPtrInput `pulumi:"hashKey"`
	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes dynamodb.TableLocalSecondaryIndexArrayInput `pulumi:"localSecondaryIndexes"`
	Name                  pulumi.StringPtrInput                       `pulumi:"name"`
	Provisioned           ProvisionedTableArgsPtrInput                `pulumi:"provisioned"`
	// The name of the range key; must be defined.
	RangeKey pulumi.StringPtrInput `pulumi:"rangeKey"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (IntermediateTableArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntermediateTableArgs)(nil)).Elem()
}

func (i IntermediateTableArgsArgs) ToIntermediateTableArgsOutput() IntermediateTableArgsOutput {
	return i.ToIntermediateTableArgsOutputWithContext(context.Background())
}

func (i IntermediateTableArgsArgs) ToIntermediateTableArgsOutputWithContext(ctx context.Context) IntermediateTableArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntermediateTableArgsOutput)
}

func (i IntermediateTableArgsArgs) ToIntermediateTableArgsPtrOutput() IntermediateTableArgsPtrOutput {
	return i.ToIntermediateTableArgsPtrOutputWithContext(context.Background())
}

func (i IntermediateTableArgsArgs) ToIntermediateTableArgsPtrOutputWithContext(ctx context.Context) IntermediateTableArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntermediateTableArgsOutput).ToIntermediateTableArgsPtrOutputWithContext(ctx)
}

// IntermediateTableArgsPtrInput is an input type that accepts IntermediateTableArgsArgs, IntermediateTableArgsPtr and IntermediateTableArgsPtrOutput values.
// You can construct a concrete instance of `IntermediateTableArgsPtrInput` via:
//
//          IntermediateTableArgsArgs{...}
//
//  or:
//
//          nil
type IntermediateTableArgsPtrInput interface {
	pulumi.Input

	ToIntermediateTableArgsPtrOutput() IntermediateTableArgsPtrOutput
	ToIntermediateTableArgsPtrOutputWithContext(context.Context) IntermediateTableArgsPtrOutput
}

type intermediateTableArgsPtrType IntermediateTableArgsArgs

func IntermediateTableArgsPtr(v *IntermediateTableArgsArgs) IntermediateTableArgsPtrInput {
	return (*intermediateTableArgsPtrType)(v)
}

func (*intermediateTableArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntermediateTableArgs)(nil)).Elem()
}

func (i *intermediateTableArgsPtrType) ToIntermediateTableArgsPtrOutput() IntermediateTableArgsPtrOutput {
	return i.ToIntermediateTableArgsPtrOutputWithContext(context.Background())
}

func (i *intermediateTableArgsPtrType) ToIntermediateTableArgsPtrOutputWithContext(ctx context.Context) IntermediateTableArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntermediateTableArgsPtrOutput)
}

// Arguments for a basic AWS DynamoDB Table.
type IntermediateTableArgsOutput struct{ *pulumi.OutputState }

func (IntermediateTableArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntermediateTableArgs)(nil)).Elem()
}

func (o IntermediateTableArgsOutput) ToIntermediateTableArgsOutput() IntermediateTableArgsOutput {
	return o
}

func (o IntermediateTableArgsOutput) ToIntermediateTableArgsOutputWithContext(ctx context.Context) IntermediateTableArgsOutput {
	return o
}

func (o IntermediateTableArgsOutput) ToIntermediateTableArgsPtrOutput() IntermediateTableArgsPtrOutput {
	return o.ToIntermediateTableArgsPtrOutputWithContext(context.Background())
}

func (o IntermediateTableArgsOutput) ToIntermediateTableArgsPtrOutputWithContext(ctx context.Context) IntermediateTableArgsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntermediateTableArgs) *IntermediateTableArgs {
		return &v
	}).(IntermediateTableArgsPtrOutput)
}

// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes.
func (o IntermediateTableArgsOutput) Attributes() dynamodb.TableAttributeArrayOutput {
	return o.ApplyT(func(v IntermediateTableArgs) []dynamodb.TableAttribute { return v.Attributes }).(dynamodb.TableAttributeArrayOutput)
}

// Describe a GSI for the table;
// subject to the normal limits on the number of GSIs, projected
// attributes, etc.
func (o IntermediateTableArgsOutput) GlobalSecondaryIndexes() dynamodb.TableGlobalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v IntermediateTableArgs) []dynamodb.TableGlobalSecondaryIndex { return v.GlobalSecondaryIndexes }).(dynamodb.TableGlobalSecondaryIndexArrayOutput)
}

// The name of the hash key in the index; must be
// defined as an attribute in the resource.
func (o IntermediateTableArgsOutput) HashKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntermediateTableArgs) *string { return v.HashKey }).(pulumi.StringPtrOutput)
}

// Describe an LSI on the table;
// these can only be allocated *at creation* so you cannot change this
// definition after you have created the resource.
func (o IntermediateTableArgsOutput) LocalSecondaryIndexes() dynamodb.TableLocalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v IntermediateTableArgs) []dynamodb.TableLocalSecondaryIndex { return v.LocalSecondaryIndexes }).(dynamodb.TableLocalSecondaryIndexArrayOutput)
}

func (o IntermediateTableArgsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntermediateTableArgs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o IntermediateTableArgsOutput) Provisioned() ProvisionedTableArgsPtrOutput {
	return o.ApplyT(func(v IntermediateTableArgs) *ProvisionedTableArgs { return v.Provisioned }).(ProvisionedTableArgsPtrOutput)
}

// The name of the range key; must be defined.
func (o IntermediateTableArgsOutput) RangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntermediateTableArgs) *string { return v.RangeKey }).(pulumi.StringPtrOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider .
func (o IntermediateTableArgsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v IntermediateTableArgs) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type IntermediateTableArgsPtrOutput struct{ *pulumi.OutputState }

func (IntermediateTableArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntermediateTableArgs)(nil)).Elem()
}

func (o IntermediateTableArgsPtrOutput) ToIntermediateTableArgsPtrOutput() IntermediateTableArgsPtrOutput {
	return o
}

func (o IntermediateTableArgsPtrOutput) ToIntermediateTableArgsPtrOutputWithContext(ctx context.Context) IntermediateTableArgsPtrOutput {
	return o
}

func (o IntermediateTableArgsPtrOutput) Elem() IntermediateTableArgsOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) IntermediateTableArgs {
		if v != nil {
			return *v
		}
		var ret IntermediateTableArgs
		return ret
	}).(IntermediateTableArgsOutput)
}

// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes.
func (o IntermediateTableArgsPtrOutput) Attributes() dynamodb.TableAttributeArrayOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) []dynamodb.TableAttribute {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(dynamodb.TableAttributeArrayOutput)
}

// Describe a GSI for the table;
// subject to the normal limits on the number of GSIs, projected
// attributes, etc.
func (o IntermediateTableArgsPtrOutput) GlobalSecondaryIndexes() dynamodb.TableGlobalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) []dynamodb.TableGlobalSecondaryIndex {
		if v == nil {
			return nil
		}
		return v.GlobalSecondaryIndexes
	}).(dynamodb.TableGlobalSecondaryIndexArrayOutput)
}

// The name of the hash key in the index; must be
// defined as an attribute in the resource.
func (o IntermediateTableArgsPtrOutput) HashKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.HashKey
	}).(pulumi.StringPtrOutput)
}

// Describe an LSI on the table;
// these can only be allocated *at creation* so you cannot change this
// definition after you have created the resource.
func (o IntermediateTableArgsPtrOutput) LocalSecondaryIndexes() dynamodb.TableLocalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) []dynamodb.TableLocalSecondaryIndex {
		if v == nil {
			return nil
		}
		return v.LocalSecondaryIndexes
	}).(dynamodb.TableLocalSecondaryIndexArrayOutput)
}

func (o IntermediateTableArgsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o IntermediateTableArgsPtrOutput) Provisioned() ProvisionedTableArgsPtrOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) *ProvisionedTableArgs {
		if v == nil {
			return nil
		}
		return v.Provisioned
	}).(ProvisionedTableArgsPtrOutput)
}

// The name of the range key; must be defined.
func (o IntermediateTableArgsPtrOutput) RangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) *string {
		if v == nil {
			return nil
		}
		return v.RangeKey
	}).(pulumi.StringPtrOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider .
func (o IntermediateTableArgsPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IntermediateTableArgs) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The arguments needed for a Provisioned AWS DynamoDB Table. If not provided, then the Table
// will be provisioned in OnDemand mode.
type ProvisionedTableArgs struct {
	// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
	ReadCapacity int `pulumi:"readCapacity"`
	// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
	WriteCapacity int `pulumi:"writeCapacity"`
}

// ProvisionedTableArgsInput is an input type that accepts ProvisionedTableArgsArgs and ProvisionedTableArgsOutput values.
// You can construct a concrete instance of `ProvisionedTableArgsInput` via:
//
//          ProvisionedTableArgsArgs{...}
type ProvisionedTableArgsInput interface {
	pulumi.Input

	ToProvisionedTableArgsOutput() ProvisionedTableArgsOutput
	ToProvisionedTableArgsOutputWithContext(context.Context) ProvisionedTableArgsOutput
}

// The arguments needed for a Provisioned AWS DynamoDB Table. If not provided, then the Table
// will be provisioned in OnDemand mode.
type ProvisionedTableArgsArgs struct {
	// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
	ReadCapacity pulumi.IntInput `pulumi:"readCapacity"`
	// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
	WriteCapacity pulumi.IntInput `pulumi:"writeCapacity"`
}

func (ProvisionedTableArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedTableArgs)(nil)).Elem()
}

func (i ProvisionedTableArgsArgs) ToProvisionedTableArgsOutput() ProvisionedTableArgsOutput {
	return i.ToProvisionedTableArgsOutputWithContext(context.Background())
}

func (i ProvisionedTableArgsArgs) ToProvisionedTableArgsOutputWithContext(ctx context.Context) ProvisionedTableArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedTableArgsOutput)
}

func (i ProvisionedTableArgsArgs) ToProvisionedTableArgsPtrOutput() ProvisionedTableArgsPtrOutput {
	return i.ToProvisionedTableArgsPtrOutputWithContext(context.Background())
}

func (i ProvisionedTableArgsArgs) ToProvisionedTableArgsPtrOutputWithContext(ctx context.Context) ProvisionedTableArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedTableArgsOutput).ToProvisionedTableArgsPtrOutputWithContext(ctx)
}

// ProvisionedTableArgsPtrInput is an input type that accepts ProvisionedTableArgsArgs, ProvisionedTableArgsPtr and ProvisionedTableArgsPtrOutput values.
// You can construct a concrete instance of `ProvisionedTableArgsPtrInput` via:
//
//          ProvisionedTableArgsArgs{...}
//
//  or:
//
//          nil
type ProvisionedTableArgsPtrInput interface {
	pulumi.Input

	ToProvisionedTableArgsPtrOutput() ProvisionedTableArgsPtrOutput
	ToProvisionedTableArgsPtrOutputWithContext(context.Context) ProvisionedTableArgsPtrOutput
}

type provisionedTableArgsPtrType ProvisionedTableArgsArgs

func ProvisionedTableArgsPtr(v *ProvisionedTableArgsArgs) ProvisionedTableArgsPtrInput {
	return (*provisionedTableArgsPtrType)(v)
}

func (*provisionedTableArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedTableArgs)(nil)).Elem()
}

func (i *provisionedTableArgsPtrType) ToProvisionedTableArgsPtrOutput() ProvisionedTableArgsPtrOutput {
	return i.ToProvisionedTableArgsPtrOutputWithContext(context.Background())
}

func (i *provisionedTableArgsPtrType) ToProvisionedTableArgsPtrOutputWithContext(ctx context.Context) ProvisionedTableArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedTableArgsPtrOutput)
}

// The arguments needed for a Provisioned AWS DynamoDB Table. If not provided, then the Table
// will be provisioned in OnDemand mode.
type ProvisionedTableArgsOutput struct{ *pulumi.OutputState }

func (ProvisionedTableArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedTableArgs)(nil)).Elem()
}

func (o ProvisionedTableArgsOutput) ToProvisionedTableArgsOutput() ProvisionedTableArgsOutput {
	return o
}

func (o ProvisionedTableArgsOutput) ToProvisionedTableArgsOutputWithContext(ctx context.Context) ProvisionedTableArgsOutput {
	return o
}

func (o ProvisionedTableArgsOutput) ToProvisionedTableArgsPtrOutput() ProvisionedTableArgsPtrOutput {
	return o.ToProvisionedTableArgsPtrOutputWithContext(context.Background())
}

func (o ProvisionedTableArgsOutput) ToProvisionedTableArgsPtrOutputWithContext(ctx context.Context) ProvisionedTableArgsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisionedTableArgs) *ProvisionedTableArgs {
		return &v
	}).(ProvisionedTableArgsPtrOutput)
}

// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
func (o ProvisionedTableArgsOutput) ReadCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v ProvisionedTableArgs) int { return v.ReadCapacity }).(pulumi.IntOutput)
}

// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
func (o ProvisionedTableArgsOutput) WriteCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v ProvisionedTableArgs) int { return v.WriteCapacity }).(pulumi.IntOutput)
}

type ProvisionedTableArgsPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedTableArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedTableArgs)(nil)).Elem()
}

func (o ProvisionedTableArgsPtrOutput) ToProvisionedTableArgsPtrOutput() ProvisionedTableArgsPtrOutput {
	return o
}

func (o ProvisionedTableArgsPtrOutput) ToProvisionedTableArgsPtrOutputWithContext(ctx context.Context) ProvisionedTableArgsPtrOutput {
	return o
}

func (o ProvisionedTableArgsPtrOutput) Elem() ProvisionedTableArgsOutput {
	return o.ApplyT(func(v *ProvisionedTableArgs) ProvisionedTableArgs {
		if v != nil {
			return *v
		}
		var ret ProvisionedTableArgs
		return ret
	}).(ProvisionedTableArgsOutput)
}

// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
func (o ProvisionedTableArgsPtrOutput) ReadCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProvisionedTableArgs) *int {
		if v == nil {
			return nil
		}
		return &v.ReadCapacity
	}).(pulumi.IntPtrOutput)
}

// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
func (o ProvisionedTableArgsPtrOutput) WriteCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProvisionedTableArgs) *int {
		if v == nil {
			return nil
		}
		return &v.WriteCapacity
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BasicTableArgsInput)(nil)).Elem(), BasicTableArgsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicTableArgsPtrInput)(nil)).Elem(), BasicTableArgsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpertTableArgsInput)(nil)).Elem(), ExpertTableArgsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpertTableArgsPtrInput)(nil)).Elem(), ExpertTableArgsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntermediateTableArgsInput)(nil)).Elem(), IntermediateTableArgsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntermediateTableArgsPtrInput)(nil)).Elem(), IntermediateTableArgsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedTableArgsInput)(nil)).Elem(), ProvisionedTableArgsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedTableArgsPtrInput)(nil)).Elem(), ProvisionedTableArgsArgs{})
	pulumi.RegisterOutputType(BasicTableArgsOutput{})
	pulumi.RegisterOutputType(BasicTableArgsPtrOutput{})
	pulumi.RegisterOutputType(ExpertTableArgsOutput{})
	pulumi.RegisterOutputType(ExpertTableArgsPtrOutput{})
	pulumi.RegisterOutputType(IntermediateTableArgsOutput{})
	pulumi.RegisterOutputType(IntermediateTableArgsPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedTableArgsOutput{})
	pulumi.RegisterOutputType(ProvisionedTableArgsPtrOutput{})
}
